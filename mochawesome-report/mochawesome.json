{
  "stats": {
    "suites": 5,
    "tests": 27,
    "passes": 18,
    "pending": 0,
    "failures": 9,
    "start": "2021-11-24T11:37:48.659Z",
    "end": "2021-11-24T11:37:49.036Z",
    "duration": 377,
    "testsRegistered": 27,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ad6501d9-362f-4225-a814-8bf106ec6d01",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1c8cdcfe-d21c-4f63-9205-13c8c6baa092",
          "title": "#upperFirst()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\test.js",
          "file": "\\test\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return string with capitalized first letter",
              "fullTitle": "#upperFirst() should return string with capitalized first letter",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst('test')).to.equal('Test');\nexpect(upperFirst('TEST')).to.equal('TEST');",
              "err": {},
              "uuid": "7eb0a758-4ed3-4064-b855-658d55e01ec7",
              "parentUUID": "1c8cdcfe-d21c-4f63-9205-13c8c6baa092",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7eb0a758-4ed3-4064-b855-658d55e01ec7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "642c1c17-9fad-4aa6-a990-377550d34a08",
          "title": "#toString()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\test.js",
          "file": "\\test\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return string when parameter is already string",
              "fullTitle": "#toString() should return string when parameter is already string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString('test')).to.equal('test');",
              "err": {},
              "uuid": "2d250644-01b5-4be0-a5ea-d04f787ce178",
              "parentUUID": "642c1c17-9fad-4aa6-a990-377550d34a08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty string when converted from null",
              "fullTitle": "#toString() should return empty string when converted from null",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toString(null)).to.equal('');",
              "err": {
                "message": "AssertionError: expected 'null' to equal ''",
                "estack": "AssertionError: expected 'null' to equal ''\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/test.js:21:31)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- null\n"
              },
              "uuid": "3253638b-4461-4e44-a104-80f628333dbe",
              "parentUUID": "642c1c17-9fad-4aa6-a990-377550d34a08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty string when converted from undefined",
              "fullTitle": "#toString() should return empty string when converted from undefined",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toString(undefined)).to.equal('');",
              "err": {
                "message": "AssertionError: expected 'undefined' to equal ''",
                "estack": "AssertionError: expected 'undefined' to equal ''\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/test.js:24:36)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- undefined\n"
              },
              "uuid": "062183c1-8b2d-4421-9e42-39450432427c",
              "parentUUID": "642c1c17-9fad-4aa6-a990-377550d34a08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from array",
              "fullTitle": "#toString() should return string when converted from array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 3];\nconst numbersWithNull = [1, 2, null];\nexpect(toString(numbers)).to.equal('1,2,3');\nexpect(toString(numbersWithNull)).to.equal('1,2,');",
              "err": {},
              "uuid": "959170ae-baef-4a10-8275-7f94ab2843fc",
              "parentUUID": "642c1c17-9fad-4aa6-a990-377550d34a08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from number",
              "fullTitle": "#toString() should return string when converted from number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(-3)).to.equal('-3');\nexpect(toString(1.234)).to.equal('1.234');",
              "err": {},
              "uuid": "3f0d8392-c687-4721-a937-cdef006364c7",
              "parentUUID": "642c1c17-9fad-4aa6-a990-377550d34a08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from sign -0",
              "fullTitle": "#toString() should return string when converted from sign -0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(-0)).to.equal('-0');",
              "err": {},
              "uuid": "e37a0078-7441-40bb-af8a-00048944a175",
              "parentUUID": "642c1c17-9fad-4aa6-a990-377550d34a08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from symbol",
              "fullTitle": "#toString() should return string when converted from symbol",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const symbol = Symbol('test');\nexpect(toString(symbol)).to.equal('Symbol(test)');",
              "err": {},
              "uuid": "8f33a47c-6f2d-4a57-be43-a0007f057eb3",
              "parentUUID": "642c1c17-9fad-4aa6-a990-377550d34a08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d250644-01b5-4be0-a5ea-d04f787ce178",
            "959170ae-baef-4a10-8275-7f94ab2843fc",
            "3f0d8392-c687-4721-a937-cdef006364c7",
            "e37a0078-7441-40bb-af8a-00048944a175",
            "8f33a47c-6f2d-4a57-be43-a0007f057eb3"
          ],
          "failures": [
            "3253638b-4461-4e44-a104-80f628333dbe",
            "062183c1-8b2d-4421-9e42-39450432427c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5d8d5887-08df-49ba-b6d1-ca85031e9b0d",
          "title": "#ceil()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\test.js",
          "file": "\\test\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return rounded up integer when precision is 0 (default)",
              "fullTitle": "#ceil() should return rounded up integer when precision is 0 (default)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(1.2345)).to.equal(2);\nexpect(ceil(2.83)).to.equal(3);",
              "err": {},
              "uuid": "1ff67839-3e3a-4603-9ee9-419d71a04ec9",
              "parentUUID": "5d8d5887-08df-49ba-b6d1-ca85031e9b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return rounded up number with two decimals when precision is 2",
              "fullTitle": "#ceil() should return rounded up number with two decimals when precision is 2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(1.2345, 2)).to.equal(1.24);",
              "err": {},
              "uuid": "519824af-6e14-4910-bfda-d237e003998d",
              "parentUUID": "5d8d5887-08df-49ba-b6d1-ca85031e9b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return rounded up integer when precision is negative number",
              "fullTitle": "#ceil() should return rounded up integer when precision is negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(1234, -2)).to.equal(1300);",
              "err": {},
              "uuid": "cf41ad6c-6c1e-42d4-be8e-a43770a97193",
              "parentUUID": "5d8d5887-08df-49ba-b6d1-ca85031e9b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return rounded up integer when precision is 0 (default) and given number is negative",
              "fullTitle": "#ceil() should return rounded up integer when precision is 0 (default) and given number is negative",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(-2.34)).to.equal(-2);",
              "err": {},
              "uuid": "a8acba29-04ba-4576-a1e3-bcac083b0a25",
              "parentUUID": "5d8d5887-08df-49ba-b6d1-ca85031e9b0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return number with two decimals (.00) when given value is integer and precision is 2",
              "fullTitle": "#ceil() should return number with two decimals (.00) when given value is integer and precision is 2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(2, 2)).to.equal(2.00);",
              "err": {},
              "uuid": "febe35fe-e9a2-44e0-bc98-7695e1e3d1ba",
              "parentUUID": "5d8d5887-08df-49ba-b6d1-ca85031e9b0d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1ff67839-3e3a-4603-9ee9-419d71a04ec9",
            "519824af-6e14-4910-bfda-d237e003998d",
            "cf41ad6c-6c1e-42d4-be8e-a43770a97193",
            "a8acba29-04ba-4576-a1e3-bcac083b0a25",
            "febe35fe-e9a2-44e0-bc98-7695e1e3d1ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d67656eb-e5d3-418d-b9a6-d42b8ef57c8a",
          "title": "#defaultTo()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\test.js",
          "file": "\\test\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return default value if given value is NaN",
              "fullTitle": "#defaultTo() should return default value if given value is NaN",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(NaN, 1)).to.equal(1);\nexpect(defaultTo(NaN, 'test')).to.equal('test');",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/test.js:66:34)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "90674d89-fa0e-4ce8-b835-2862a1100869",
              "parentUUID": "d67656eb-e5d3-418d-b9a6-d42b8ef57c8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is undefined",
              "fullTitle": "#defaultTo() should return default value if given value is undefined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(undefined, 'test')).to.equal('test');",
              "err": {},
              "uuid": "28f753c0-6f9c-4f58-95fd-3bfff387c847",
              "parentUUID": "d67656eb-e5d3-418d-b9a6-d42b8ef57c8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is null",
              "fullTitle": "#defaultTo() should return default value if given value is null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(null, 1)).to.equal(1);",
              "err": {},
              "uuid": "532e5816-cd7a-4995-a307-8962a97ffc67",
              "parentUUID": "d67656eb-e5d3-418d-b9a6-d42b8ef57c8a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is not Nan, null or undefined",
              "fullTitle": "#defaultTo() should return given value if it is not Nan, null or undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(1, 2)).to.equal(1);",
              "err": {},
              "uuid": "024d8c73-7ce3-4945-a8b5-8f6c047962a9",
              "parentUUID": "d67656eb-e5d3-418d-b9a6-d42b8ef57c8a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "28f753c0-6f9c-4f58-95fd-3bfff387c847",
            "532e5816-cd7a-4995-a307-8962a97ffc67",
            "024d8c73-7ce3-4945-a8b5-8f6c047962a9"
          ],
          "failures": [
            "90674d89-fa0e-4ce8-b835-2862a1100869"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "baf47718-6561-404c-9e11-91750b8c8319",
          "title": "#defaultToAny()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\test.js",
          "file": "\\test\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return given value if it is not NaN, null or undefined",
              "fullTitle": "#defaultToAny() should return given value if it is not NaN, null or undefined",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(1, 2, 3)).to.equal(1);",
              "err": {},
              "uuid": "cceb6f3f-383e-4573-82e8-aa85e8a86858",
              "parentUUID": "baf47718-6561-404c-9e11-91750b8c8319",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return first default value if given value is NaN",
              "fullTitle": "#defaultToAny() should return first default value if given value is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(NaN, 1, 2)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/test.js:85:40)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "af80a97b-44ab-495d-9c91-458d8ee18fb3",
              "parentUUID": "baf47718-6561-404c-9e11-91750b8c8319",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return first default value if given value is null",
              "fullTitle": "#defaultToAny() should return first default value if given value is null",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, 1, 2)).to.equal(1);",
              "err": {},
              "uuid": "42ae914d-fd55-46c3-b1d0-7a5ba569ebbf",
              "parentUUID": "baf47718-6561-404c-9e11-91750b8c8319",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return first default value if given value is undefined",
              "fullTitle": "#defaultToAny() should return first default value if given value is undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(undefined, 1, 2)).to.equal(1);",
              "err": {},
              "uuid": "f1db4473-0822-43a0-b304-5a0c7a4f3317",
              "parentUUID": "baf47718-6561-404c-9e11-91750b8c8319",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value if given value is NaN and first default value is NaN",
              "fullTitle": "#defaultToAny() should return second default value if given value is NaN and first default value is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(NaN, NaN, 1)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/test.js:94:42)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "2e3c0d76-e057-425f-a683-8b879bdd871a",
              "parentUUID": "baf47718-6561-404c-9e11-91750b8c8319",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value if given value is NaN and first default value is null",
              "fullTitle": "#defaultToAny() should return second default value if given value is NaN and first default value is null",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(NaN, null, 1)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/test.js:97:43)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "480688dc-78cd-490e-afb3-42d7c81270f4",
              "parentUUID": "baf47718-6561-404c-9e11-91750b8c8319",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value if given value is null and first default value is NaN",
              "fullTitle": "#defaultToAny() should return second default value if given value is null and first default value is NaN",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, NaN, 1)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/test.js:100:43)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "18e70439-3d82-4765-a7f6-2ddb386cea29",
              "parentUUID": "baf47718-6561-404c-9e11-91750b8c8319",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value if given value is undefined and first default value is NaN",
              "fullTitle": "#defaultToAny() should return second default value if given value is undefined and first default value is NaN",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(undefined, NaN, 1)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/test.js:103:48)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "c65ac1ee-c06e-444d-9bda-97e854746d10",
              "parentUUID": "baf47718-6561-404c-9e11-91750b8c8319",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value if given value is undefined and first default value is null",
              "fullTitle": "#defaultToAny() should return second default value if given value is undefined and first default value is null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(undefined, null, 1)).to.equal(1);",
              "err": {},
              "uuid": "c310ab3f-4baf-431c-be7f-396de39453b7",
              "parentUUID": "baf47718-6561-404c-9e11-91750b8c8319",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value if none of the values are valid",
              "fullTitle": "#defaultToAny() should return second default value if none of the values are valid",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, null, NaN)).to.equal(NaN);",
              "err": {
                "message": "AssertionError: expected NaN to equal NaN",
                "estack": "AssertionError: expected NaN to equal NaN\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/test.js:109:46)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": ""
              },
              "uuid": "dd96bd77-3399-45f5-805a-17f6c6e733d5",
              "parentUUID": "baf47718-6561-404c-9e11-91750b8c8319",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cceb6f3f-383e-4573-82e8-aa85e8a86858",
            "42ae914d-fd55-46c3-b1d0-7a5ba569ebbf",
            "f1db4473-0822-43a0-b304-5a0c7a4f3317",
            "c310ab3f-4baf-431c-be7f-396de39453b7"
          ],
          "failures": [
            "af80a97b-44ab-495d-9c91-458d8ee18fb3",
            "2e3c0d76-e057-425f-a683-8b879bdd871a",
            "480688dc-78cd-490e-afb3-42d7c81270f4",
            "18e70439-3d82-4765-a7f6-2ddb386cea29",
            "c65ac1ee-c06e-444d-9bda-97e854746d10",
            "dd96bd77-3399-45f5-805a-17f6c6e733d5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}