{
  "stats": {
    "suites": 10,
    "tests": 94,
    "passes": 70,
    "pending": 0,
    "failures": 24,
    "start": "2021-12-01T12:24:09.801Z",
    "end": "2021-12-01T12:24:10.224Z",
    "duration": 423,
    "testsRegistered": 94,
    "passPercent": 74.46808510638297,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "98064f74-9364-4859-8def-80538ea1a6dd",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "73faae35-5832-4a65-819a-7e683f7b28f6",
          "title": "#capitalize()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\capitalizeTest.js",
          "file": "\\test\\capitalizeTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should only keep the first letter capitalized",
              "fullTitle": "#capitalize() should only keep the first letter capitalized",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"ALLCAPS\")).to.equal(\"Allcaps\");",
              "err": {},
              "uuid": "d0e551c5-dcb6-4e8a-ae3c-7c5552fe504a",
              "parentUUID": "73faae35-5832-4a65-819a-7e683f7b28f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the string as it is",
              "fullTitle": "#capitalize() should return the string as it is",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"Capitalized\")).to.equal(\"Capitalized\");",
              "err": {},
              "uuid": "196a0c3f-55ad-47b6-8808-a634407b2965",
              "parentUUID": "73faae35-5832-4a65-819a-7e683f7b28f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should capitalize the first letter only",
              "fullTitle": "#capitalize() should capitalize the first letter only",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"lowercase\")).to.equal(\"Lowercase\");",
              "err": {},
              "uuid": "b9d50a9d-de39-44b4-97da-70898b7674f0",
              "parentUUID": "73faae35-5832-4a65-819a-7e683f7b28f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the string as it is if it cant be capitalized (symbols)",
              "fullTitle": "#capitalize() should return the string as it is if it cant be capitalized (symbols)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"#¤%&\")).to.equal(\"#¤%&\");",
              "err": {},
              "uuid": "62657adb-ebe1-4efd-b19f-320baccfdbf2",
              "parentUUID": "73faae35-5832-4a65-819a-7e683f7b28f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for a null parameter",
              "fullTitle": "#capitalize() should throw an error for a null parameter",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(null)).to.throw();",
              "err": {
                "message": "AssertionError: expected 'Null' to be a function",
                "estack": "AssertionError: expected 'Null' to be a function\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/capitalizeTest.js:23:38)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "174faa0d-213c-465c-bef8-7be8ac1dd89b",
              "parentUUID": "73faae35-5832-4a65-819a-7e683f7b28f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for an object",
              "fullTitle": "#capitalize() should throw an error for an object",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(new Date())).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected 'Wed dec 01 2021 14:24:09 gmt+0200 (itä-euroopan normaaliaika)' to be a function",
                "estack": "AssertionError: expected 'Wed dec 01 2021 14:24:09 gmt+0200 (itä-euroopan normaaliaika)' to be a function\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/capitalizeTest.js:28:44)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "5e21ccbf-6f76-4090-9b32-21125ce964cb",
              "parentUUID": "73faae35-5832-4a65-819a-7e683f7b28f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for an array",
              "fullTitle": "#capitalize() should throw an error for an array",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(['t', 'e', 's', 't'])).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected 'T,e,s,t' to be a function",
                "estack": "AssertionError: expected 'T,e,s,t' to be a function\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/capitalizeTest.js:33:54)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "80f80b4c-0ef0-40c0-a953-9d25fc37d6ff",
              "parentUUID": "73faae35-5832-4a65-819a-7e683f7b28f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0e551c5-dcb6-4e8a-ae3c-7c5552fe504a",
            "196a0c3f-55ad-47b6-8808-a634407b2965",
            "b9d50a9d-de39-44b4-97da-70898b7674f0",
            "62657adb-ebe1-4efd-b19f-320baccfdbf2"
          ],
          "failures": [
            "174faa0d-213c-465c-bef8-7be8ac1dd89b",
            "5e21ccbf-6f76-4090-9b32-21125ce964cb",
            "80f80b4c-0ef0-40c0-a953-9d25fc37d6ff"
          ],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c1846ea0-2149-4c58-aa6c-9f447ec1efe1",
          "title": "#ceil()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\ceilTest.js",
          "file": "\\test\\ceilTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return rounded up integer when precision is 0 (default)",
              "fullTitle": "#ceil() should return rounded up integer when precision is 0 (default)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(1.2345)).to.equal(2);",
              "err": {},
              "uuid": "78b5202a-4fe0-4e9b-a2a2-400a1f6af5c3",
              "parentUUID": "c1846ea0-2149-4c58-aa6c-9f447ec1efe1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set precision to 0 when null is given as a second parameter",
              "fullTitle": "#ceil() should set precision to 0 when null is given as a second parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(1.23, null)).to.equal(2);",
              "err": {},
              "uuid": "c52475c0-788e-4f82-8bed-62532ce172eb",
              "parentUUID": "c1846ea0-2149-4c58-aa6c-9f447ec1efe1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return rounded up number with two decimals when precision is 2",
              "fullTitle": "#ceil() should return rounded up number with two decimals when precision is 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(1.2345, 2)).to.equal(1.24);",
              "err": {},
              "uuid": "422f9e24-d02f-43e6-9321-94743545d4e9",
              "parentUUID": "c1846ea0-2149-4c58-aa6c-9f447ec1efe1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return rounded up integer when precision is negative number",
              "fullTitle": "#ceil() should return rounded up integer when precision is negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(1234, -2)).to.equal(1300);",
              "err": {},
              "uuid": "d98d24ba-7887-4086-bcfe-389942e04f75",
              "parentUUID": "c1846ea0-2149-4c58-aa6c-9f447ec1efe1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return rounded up integer when precision is 0 (default) and given number is negative",
              "fullTitle": "#ceil() should return rounded up integer when precision is 0 (default) and given number is negative",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(-2.34)).to.equal(-2);",
              "err": {},
              "uuid": "bfec1759-6924-4975-bd6d-2cec178cd6ef",
              "parentUUID": "c1846ea0-2149-4c58-aa6c-9f447ec1efe1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return number with two decimals (.00) when given value is integer and precision is 2",
              "fullTitle": "#ceil() should return number with two decimals (.00) when given value is integer and precision is 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(2, 2)).to.equal(2.00);",
              "err": {},
              "uuid": "670c6024-6ed3-4b6e-b9e1-8bf644fc2f30",
              "parentUUID": "c1846ea0-2149-4c58-aa6c-9f447ec1efe1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when given value is 0",
              "fullTitle": "#ceil() should return 0 when given value is 0",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(0)).to.equal(0);",
              "err": {},
              "uuid": "b02dbe20-6abe-470a-bfaa-afbe6d5bd82f",
              "parentUUID": "c1846ea0-2149-4c58-aa6c-9f447ec1efe1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0.000 when given value is 0 and precision is 3",
              "fullTitle": "#ceil() should return 0.000 when given value is 0 and precision is 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(0, 3)).to.equal(0.000);",
              "err": {},
              "uuid": "c3a6e07e-2ab5-4924-805d-cfcc4b2cea96",
              "parentUUID": "c1846ea0-2149-4c58-aa6c-9f447ec1efe1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for a null parameter",
              "fullTitle": "#ceil() should throw an error for a null parameter",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(ceil(null)).to.throw();",
              "err": {
                "message": "AssertionError: expected 0 to be a function",
                "estack": "AssertionError: expected 0 to be a function\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/ceilTest.js:41:34)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "400129c8-4204-46d5-9a7a-57f1f5570485",
              "parentUUID": "c1846ea0-2149-4c58-aa6c-9f447ec1efe1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return rounded up integer when given value is 0 and precision is negative number",
              "fullTitle": "#ceil() should return rounded up integer when given value is 0 and precision is negative number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(ceil(0, -2)).to.equal(100);",
              "err": {
                "message": "AssertionError: expected 0 to equal 100",
                "estack": "AssertionError: expected 0 to equal 100\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/ceilTest.js:46:30)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- 0\n+ 100\n"
              },
              "uuid": "2d17c1d7-e120-4c55-9ad2-9f9aa0c818f1",
              "parentUUID": "c1846ea0-2149-4c58-aa6c-9f447ec1efe1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "78b5202a-4fe0-4e9b-a2a2-400a1f6af5c3",
            "c52475c0-788e-4f82-8bed-62532ce172eb",
            "422f9e24-d02f-43e6-9321-94743545d4e9",
            "d98d24ba-7887-4086-bcfe-389942e04f75",
            "bfec1759-6924-4975-bd6d-2cec178cd6ef",
            "670c6024-6ed3-4b6e-b9e1-8bf644fc2f30",
            "b02dbe20-6abe-470a-bfaa-afbe6d5bd82f",
            "c3a6e07e-2ab5-4924-805d-cfcc4b2cea96"
          ],
          "failures": [
            "400129c8-4204-46d5-9a7a-57f1f5570485",
            "2d17c1d7-e120-4c55-9ad2-9f9aa0c818f1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
          "title": "#defaultToAny()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\defaulttoanyTest.js",
          "file": "\\test\\defaulttoanyTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return given value if it is a number",
              "fullTitle": "#defaultToAny() should return given value if it is a number",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(1, 2, 3)).to.equal(1);",
              "err": {},
              "uuid": "7e9e983e-8baa-43ca-bc48-6a562d0e55f6",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is a string",
              "fullTitle": "#defaultToAny() should return given value if it is a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(\"test\", 2, 3)).to.equal(\"test\");",
              "err": {},
              "uuid": "8d9bdd80-c832-4990-92f0-c34eef075b37",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is an array",
              "fullTitle": "#defaultToAny() should return given value if it is an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(array1, 2, 3)).to.equal(array1);",
              "err": {},
              "uuid": "669cc4c3-a3e6-44ed-9826-df317b2cee9c",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is an object",
              "fullTitle": "#defaultToAny() should return given value if it is an object",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(array1, 2, 3)).to.equal(array1);",
              "err": {},
              "uuid": "59044e53-b113-454f-9fa7-6b45196b24b5",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is a symbol",
              "fullTitle": "#defaultToAny() should return given value if it is a symbol",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(symbol1, 2, 3)).to.equal(symbol1);",
              "err": {},
              "uuid": "2d464388-2c51-4200-957f-27f3ff478bb1",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return first default value (number) if given value is NaN",
              "fullTitle": "#defaultToAny() should return first default value (number) if given value is NaN",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(NaN, 1, 2)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoanyTest.js:35:42)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "3619f316-55e6-40a4-ab7d-220f6516470c",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return first default value (number) if given value is null",
              "fullTitle": "#defaultToAny() should return first default value (number) if given value is null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, 1, 2)).to.equal(1);",
              "err": {},
              "uuid": "b6cf6abf-cb38-4a49-9ad7-8af4678db888",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return first default value (object) if given value is null",
              "fullTitle": "#defaultToAny() should return first default value (object) if given value is null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, obj1, 2)).to.equal(obj1);",
              "err": {},
              "uuid": "cfbe80ec-cac4-431f-b2be-e483dd08f75d",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return first default value (number) if given value is undefined",
              "fullTitle": "#defaultToAny() should return first default value (number) if given value is undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(undefined, 1, 2)).to.equal(1);",
              "err": {},
              "uuid": "bded0ea7-7a0e-4a11-8f64-303a2e0f6e22",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (string) if given value is NaN and first default value is NaN",
              "fullTitle": "#defaultToAny() should return second default value (string) if given value is NaN and first default value is NaN",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(NaN, NaN, 'test')).to.equal('test');",
              "err": {
                "message": "AssertionError: expected NaN to equal 'test'",
                "estack": "AssertionError: expected NaN to equal 'test'\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoanyTest.js:52:49)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "58870819-f2cb-480c-aff6-7768ce672dfe",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (number) if given value is NaN and first default value is null",
              "fullTitle": "#defaultToAny() should return second default value (number) if given value is NaN and first default value is null",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(NaN, null, 1)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoanyTest.js:57:45)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "036d4fef-1249-4c97-86ba-c6f003bd2b4f",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (number) if given value is null and first default value is NaN",
              "fullTitle": "#defaultToAny() should return second default value (number) if given value is null and first default value is NaN",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, NaN, 1)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoanyTest.js:62:45)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "52bd7045-9dea-4def-8e10-e8c5e897b0b6",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (number) if given value is undefined and first default value is NaN",
              "fullTitle": "#defaultToAny() should return second default value (number) if given value is undefined and first default value is NaN",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(undefined, NaN, 1)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoanyTest.js:67:50)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "2e08f8e4-55de-4ca9-890c-51842a7b1895",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default (number) value if given value is undefined and first default value is null",
              "fullTitle": "#defaultToAny() should return second default (number) value if given value is undefined and first default value is null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(undefined, null, 1)).to.equal(1);",
              "err": {},
              "uuid": "3fdec47f-36f5-42e3-b21d-390737010eb4",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (NaN) if the first two parameters are null",
              "fullTitle": "#defaultToAny() should return second default value (NaN) if the first two parameters are null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, null, NaN)).to.be.NaN;",
              "err": {},
              "uuid": "95a834cd-ca25-4e12-8529-297e90c4633f",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (undefined) if the first two parameters are NaN",
              "fullTitle": "#defaultToAny() should return second default value (undefined) if the first two parameters are NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, null, undefined)).to.equal(undefined);",
              "err": {},
              "uuid": "de7f081d-1e1e-476b-90b3-941a640d097b",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (undefined) if the first two parameters are NaN",
              "fullTitle": "#defaultToAny() should return second default value (undefined) if the first two parameters are NaN",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(NaN, NaN, undefined)).to.equal(undefined);",
              "err": {
                "message": "AssertionError: expected NaN to equal undefined",
                "estack": "AssertionError: expected NaN to equal undefined\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoanyTest.js:84:52)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "ef100deb-8a4f-405f-95d1-54d8de26eaa1",
              "parentUUID": "324c95b9-135c-4eb4-b275-9d67c8f203ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e9e983e-8baa-43ca-bc48-6a562d0e55f6",
            "8d9bdd80-c832-4990-92f0-c34eef075b37",
            "669cc4c3-a3e6-44ed-9826-df317b2cee9c",
            "59044e53-b113-454f-9fa7-6b45196b24b5",
            "2d464388-2c51-4200-957f-27f3ff478bb1",
            "b6cf6abf-cb38-4a49-9ad7-8af4678db888",
            "cfbe80ec-cac4-431f-b2be-e483dd08f75d",
            "bded0ea7-7a0e-4a11-8f64-303a2e0f6e22",
            "3fdec47f-36f5-42e3-b21d-390737010eb4",
            "95a834cd-ca25-4e12-8529-297e90c4633f",
            "de7f081d-1e1e-476b-90b3-941a640d097b"
          ],
          "failures": [
            "3619f316-55e6-40a4-ab7d-220f6516470c",
            "58870819-f2cb-480c-aff6-7768ce672dfe",
            "036d4fef-1249-4c97-86ba-c6f003bd2b4f",
            "52bd7045-9dea-4def-8e10-e8c5e897b0b6",
            "2e08f8e4-55de-4ca9-890c-51842a7b1895",
            "ef100deb-8a4f-405f-95d1-54d8de26eaa1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2c980f3f-a7e3-406a-95db-c671d091020f",
          "title": "#defaultTo()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\defaulttoTest.js",
          "file": "\\test\\defaulttoTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return default value if given value is NaN and default is a number",
              "fullTitle": "#defaultTo() should return default value if given value is NaN and default is a number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(NaN, 1)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoTest.js:10:36)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "c1cc399e-5a34-4786-b05f-9491c4e2c2b7",
              "parentUUID": "2c980f3f-a7e3-406a-95db-c671d091020f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is NaN and default is a string",
              "fullTitle": "#defaultTo() should return default value if given value is NaN and default is a string",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(NaN, 'test')).to.equal('test');",
              "err": {
                "message": "AssertionError: expected NaN to equal 'test'",
                "estack": "AssertionError: expected NaN to equal 'test'\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoTest.js:15:41)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "840d6cb4-e7ba-4d4c-9460-ac103ed054ad",
              "parentUUID": "2c980f3f-a7e3-406a-95db-c671d091020f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is undefined and default is an array",
              "fullTitle": "#defaultTo() should return default value if given value is undefined and default is an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array1 = [1, 2, 3]\nexpect(defaultTo(undefined, array1)).to.equal(array1);",
              "err": {},
              "uuid": "f7ac7b01-22e8-48fb-b1af-a1c9fff38e06",
              "parentUUID": "2c980f3f-a7e3-406a-95db-c671d091020f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is undefined and default is a string",
              "fullTitle": "#defaultTo() should return default value if given value is undefined and default is a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(undefined, 'test')).to.equal('test');",
              "err": {},
              "uuid": "e2e3ccc8-874d-426e-a72f-7f54524daa78",
              "parentUUID": "2c980f3f-a7e3-406a-95db-c671d091020f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is undefined and default is an object",
              "fullTitle": "#defaultTo() should return default value if given value is undefined and default is an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(undefined, obj1)).to.equal(obj1);",
              "err": {},
              "uuid": "d6883147-841b-4117-9be8-61b020ef3b36",
              "parentUUID": "2c980f3f-a7e3-406a-95db-c671d091020f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is null and default is a number",
              "fullTitle": "#defaultTo() should return default value if given value is null and default is a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(null, 1)).to.equal(1);",
              "err": {},
              "uuid": "700ad678-1ef7-4d78-9ab8-583be5d0d42f",
              "parentUUID": "2c980f3f-a7e3-406a-95db-c671d091020f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is null and default is an array",
              "fullTitle": "#defaultTo() should return default value if given value is null and default is an array",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(null, [1,2,3])).to.equal([1,2,3]);",
              "err": {
                "message": "AssertionError: expected [ 1, 2, 3 ] to equal [ 1, 2, 3 ]",
                "estack": "AssertionError: expected [ 1, 2, 3 ] to equal [ 1, 2, 3 ]\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoTest.js:38:43)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": ""
              },
              "uuid": "1049b137-e70a-4f1a-a56e-e524638c1f8d",
              "parentUUID": "2c980f3f-a7e3-406a-95db-c671d091020f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is a number",
              "fullTitle": "#defaultTo() should return given value if it is a number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(1, 2)).to.equal(1);",
              "err": {},
              "uuid": "9ed7618e-0ed2-4d58-a6c0-f2332acda9ce",
              "parentUUID": "2c980f3f-a7e3-406a-95db-c671d091020f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is a string",
              "fullTitle": "#defaultTo() should return given value if it is a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo('test', 2)).to.equal('test');",
              "err": {},
              "uuid": "44478455-fd85-446b-833a-903e1b32d4af",
              "parentUUID": "2c980f3f-a7e3-406a-95db-c671d091020f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is an array",
              "fullTitle": "#defaultTo() should return given value if it is an array",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo([1,2,3], 3)).to.equal([1,2,3]);",
              "err": {
                "message": "AssertionError: expected [ 1, 2, 3 ] to equal [ 1, 2, 3 ]",
                "estack": "AssertionError: expected [ 1, 2, 3 ] to equal [ 1, 2, 3 ]\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoTest.js:50:40)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": ""
              },
              "uuid": "7ba8273d-718c-4f0a-b15b-5d95a709036f",
              "parentUUID": "2c980f3f-a7e3-406a-95db-c671d091020f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is a symbol",
              "fullTitle": "#defaultTo() should return given value if it is a symbol",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const symbol = Symbol('test');\nexpect(defaultTo(symbol, 2)).to.equal(symbol);",
              "err": {},
              "uuid": "5201a5dd-c749-4a1e-aa09-e5a1508cc44a",
              "parentUUID": "2c980f3f-a7e3-406a-95db-c671d091020f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is an object",
              "fullTitle": "#defaultTo() should return given value if it is an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(obj1, 1)).to.equal(obj1);",
              "err": {},
              "uuid": "82d22732-7ab6-416b-90b8-cc844ee88124",
              "parentUUID": "2c980f3f-a7e3-406a-95db-c671d091020f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f7ac7b01-22e8-48fb-b1af-a1c9fff38e06",
            "e2e3ccc8-874d-426e-a72f-7f54524daa78",
            "d6883147-841b-4117-9be8-61b020ef3b36",
            "700ad678-1ef7-4d78-9ab8-583be5d0d42f",
            "9ed7618e-0ed2-4d58-a6c0-f2332acda9ce",
            "44478455-fd85-446b-833a-903e1b32d4af",
            "5201a5dd-c749-4a1e-aa09-e5a1508cc44a",
            "82d22732-7ab6-416b-90b8-cc844ee88124"
          ],
          "failures": [
            "c1cc399e-5a34-4786-b05f-9491c4e2c2b7",
            "840d6cb4-e7ba-4d4c-9460-ac103ed054ad",
            "1049b137-e70a-4f1a-a56e-e524638c1f8d",
            "7ba8273d-718c-4f0a-b15b-5d95a709036f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9167d13b-3ff2-49ab-990c-4fd8965c1de3",
          "title": "#endsWith()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\endswithTest.js",
          "file": "\\test\\endswithTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true if string 1 ends with string 2",
              "fullTitle": "#endsWith() should return true if string 1 ends with string 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('test', 'st')).to.equal(true);",
              "err": {},
              "uuid": "d33cff3e-e0d8-4622-a27e-7311cd2c54aa",
              "parentUUID": "9167d13b-3ff2-49ab-990c-4fd8965c1de3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for identical strings",
              "fullTitle": "#endsWith() should return true for identical strings",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('test', 'test')).to.equal(true);",
              "err": {},
              "uuid": "18b4b6fd-afb4-44ea-bd5d-d6e3246e53c7",
              "parentUUID": "9167d13b-3ff2-49ab-990c-4fd8965c1de3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a correct string, substring and position",
              "fullTitle": "#endsWith() should return true for a correct string, substring and position",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('test', 'es', 3)).to.equal(true);",
              "err": {},
              "uuid": "86985195-e79d-466e-a310-d2e6f0701eb1",
              "parentUUID": "9167d13b-3ff2-49ab-990c-4fd8965c1de3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a faulty string, substring and position",
              "fullTitle": "#endsWith() should return false for a faulty string, substring and position",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('test', 't', 2)).to.equal(false);",
              "err": {},
              "uuid": "8d95adbc-b23d-4713-b665-19420f926b0c",
              "parentUUID": "9167d13b-3ff2-49ab-990c-4fd8965c1de3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should account for a too high position number and return true",
              "fullTitle": "#endsWith() should account for a too high position number and return true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('qwerty', 'rty', 12)).to.equal(true);",
              "err": {},
              "uuid": "3de40c7d-5201-4919-98f4-34da03489f21",
              "parentUUID": "9167d13b-3ff2-49ab-990c-4fd8965c1de3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should account for negative indexes and return true",
              "fullTitle": "#endsWith() should account for negative indexes and return true",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('qwerty', 't', -2)).to.equal(true);",
              "err": {
                "message": "AssertionError: expected false to equal true",
                "estack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/endswithTest.js:27:46)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "08bf7438-bd32-49db-a291-0c651aa730bb",
              "parentUUID": "9167d13b-3ff2-49ab-990c-4fd8965c1de3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for a non-number position",
              "fullTitle": "#endsWith() should throw an error for a non-number position",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('qwerty', 'q', 'test')).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected false to be a function",
                "estack": "AssertionError: expected false to be a function\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/endswithTest.js:32:53)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "5abab8f9-878f-4d03-9f8b-7e1e7f5b0cc7",
              "parentUUID": "9167d13b-3ff2-49ab-990c-4fd8965c1de3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for a non-integer position",
              "fullTitle": "#endsWith() should throw an error for a non-integer position",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('qwerty', 'q', 1.25)).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected true to be a function",
                "estack": "AssertionError: expected true to be a function\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/endswithTest.js:37:51)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "739f798f-3d70-4f29-b95d-ff45fa344a43",
              "parentUUID": "9167d13b-3ff2-49ab-990c-4fd8965c1de3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for a null position",
              "fullTitle": "#endsWith() should throw an error for a null position",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('qwerty', 'ty', null)).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected false to be a function",
                "estack": "AssertionError: expected false to be a function\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/endswithTest.js:42:54)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "9dba64db-7e65-46a6-a9c0-cb716eda888d",
              "parentUUID": "9167d13b-3ff2-49ab-990c-4fd8965c1de3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d33cff3e-e0d8-4622-a27e-7311cd2c54aa",
            "18b4b6fd-afb4-44ea-bd5d-d6e3246e53c7",
            "86985195-e79d-466e-a310-d2e6f0701eb1",
            "8d95adbc-b23d-4713-b665-19420f926b0c",
            "3de40c7d-5201-4919-98f4-34da03489f21"
          ],
          "failures": [
            "08bf7438-bd32-49db-a291-0c651aa730bb",
            "5abab8f9-878f-4d03-9f8b-7e1e7f5b0cc7",
            "739f798f-3d70-4f29-b95d-ff45fa344a43",
            "9dba64db-7e65-46a6-a9c0-cb716eda888d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9986b7a0-1adb-4e4d-b240-a7f16f24907f",
          "title": "#isArrayLike()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\isarraylikeTest.js",
          "file": "\\test\\isarraylikeTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return false for a function",
              "fullTitle": "#isArrayLike() should return false for a function",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLike(passedAsParameter)).to.equal(false);",
              "err": {},
              "uuid": "27117efa-d3c0-4570-bb1f-29ae7bff609a",
              "parentUUID": "9986b7a0-1adb-4e4d-b240-a7f16f24907f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a filled array",
              "fullTitle": "#isArrayLike() should return true for a filled array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLike(['a', 'b'])).to.equal(true);",
              "err": {},
              "uuid": "d6a6eed8-f0b0-4c29-a187-19caf88f16d2",
              "parentUUID": "9986b7a0-1adb-4e4d-b240-a7f16f24907f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty array",
              "fullTitle": "#isArrayLike() should return true for an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLike([])).to.equal(true);",
              "err": {},
              "uuid": "c4de7a2d-8793-4f28-ad7e-6973de2d8f60",
              "parentUUID": "9986b7a0-1adb-4e4d-b240-a7f16f24907f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a variable with no length",
              "fullTitle": "#isArrayLike() should return false for a variable with no length",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLike(24)).to.equal(false);",
              "err": {},
              "uuid": "df0f6470-2b73-4e89-a466-2e9e6dfc7d6d",
              "parentUUID": "9986b7a0-1adb-4e4d-b240-a7f16f24907f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a null parameter",
              "fullTitle": "#isArrayLike() should return false for a null parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLike(null)).to.equal(false);",
              "err": {},
              "uuid": "91f6a345-5d17-45bb-9b2d-4f3c44869468",
              "parentUUID": "9986b7a0-1adb-4e4d-b240-a7f16f24907f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "27117efa-d3c0-4570-bb1f-29ae7bff609a",
            "d6a6eed8-f0b0-4c29-a187-19caf88f16d2",
            "c4de7a2d-8793-4f28-ad7e-6973de2d8f60",
            "df0f6470-2b73-4e89-a466-2e9e6dfc7d6d",
            "91f6a345-5d17-45bb-9b2d-4f3c44869468"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
          "title": "#isEmpty()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\isemptyTest.js",
          "file": "\\test\\isemptyTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for null",
              "fullTitle": "#isEmpty() should return true for null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(null)).to.equal(true);",
              "err": {},
              "uuid": "0108c199-6a07-4273-b6bd-9c444ede88b4",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty array",
              "fullTitle": "#isEmpty() should return true for an empty array",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty([])).to.equal(true);",
              "err": {},
              "uuid": "40523be5-7a97-4888-8fde-a4b695ac7df0",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty array",
              "fullTitle": "#isEmpty() should return false for a non-empty array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty([0, 1, 2])).to.equal(false);",
              "err": {},
              "uuid": "76deb359-c4bb-408e-9ea9-7b588535cc47",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty string",
              "fullTitle": "#isEmpty() should return true for an empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(\"\")).to.equal(true);",
              "err": {},
              "uuid": "94ebf3a2-dd86-465f-b4d6-ebcf232745d5",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty string",
              "fullTitle": "#isEmpty() should return false for a non-empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty('test')).to.equal(false);",
              "err": {},
              "uuid": "14512abb-1ce0-4280-abee-71d2e35783e7",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty map",
              "fullTitle": "#isEmpty() should return true for an empty map",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(map1)).to.equal(true);",
              "err": {},
              "uuid": "d6a8cc76-0a95-4b8b-8c93-1821c33ee904",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty map",
              "fullTitle": "#isEmpty() should return false for a non-empty map",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(map2)).to.equal(false);",
              "err": {},
              "uuid": "6d5e3a6b-2c4e-48b3-bd52-e673860c59ab",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty set",
              "fullTitle": "#isEmpty() should return true for an empty set",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(set1)).to.equal(true);",
              "err": {},
              "uuid": "21ac7806-2f94-47d9-bd18-c0ebdf7f87d0",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty set",
              "fullTitle": "#isEmpty() should return false for a non-empty set",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(set2)).to.equal(false);",
              "err": {},
              "uuid": "2288960b-ca57-4e35-b88c-1e29bc219463",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty object",
              "fullTitle": "#isEmpty() should return true for an empty object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(obj1)).to.equal(true);",
              "err": {},
              "uuid": "08b6c358-4c01-4fa2-ad46-4146cb43e0b0",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty object",
              "fullTitle": "#isEmpty() should return false for a non-empty object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(obj2)).to.equal(false);",
              "err": {},
              "uuid": "1803cdc2-d3b7-4d68-ab3b-07f03b60ecb8",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty prototype object",
              "fullTitle": "#isEmpty() should return true for an empty prototype object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(Object.getPrototypeOf(obj1))).to.equal(true);",
              "err": {},
              "uuid": "eb1c4186-9280-4a15-8621-a57fe903b1c2",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty prototype object",
              "fullTitle": "#isEmpty() should return false for a non-empty prototype object",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(Object.getPrototypeOf(obj2))).to.equal(false);",
              "err": {
                "message": "AssertionError: expected true to equal false",
                "estack": "AssertionError: expected true to equal false\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/isemptyTest.js:72:55)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "28c7e666-b74f-49e5-875f-5c2cdfd5059c",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty buffer",
              "fullTitle": "#isEmpty() should return true for an empty buffer",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(buf1)).to.equal(true);",
              "err": {
                "message": "AssertionError: expected false to equal true",
                "estack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/isemptyTest.js:80:32)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "287bb65d-583f-4e71-a917-953a1ef554c4",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty buffer",
              "fullTitle": "#isEmpty() should return false for a non-empty buffer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(buf2)).to.equal(false);",
              "err": {},
              "uuid": "e29d96d8-b327-4f4e-a0a7-ea7b7ffd90cb",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty TypedArray",
              "fullTitle": "#isEmpty() should return true for an empty TypedArray",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(typedArray1)).to.equal(true);",
              "err": {},
              "uuid": "e0f41151-d080-4a05-9a15-a65879cfe173",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty TypedArray",
              "fullTitle": "#isEmpty() should return false for a non-empty TypedArray",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(typedArray2)).to.equal(false);",
              "err": {},
              "uuid": "d9341769-18e4-419a-a50a-a52cf4d75381",
              "parentUUID": "f7185ef9-9ffd-4fe1-8233-55272660aa73",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0108c199-6a07-4273-b6bd-9c444ede88b4",
            "40523be5-7a97-4888-8fde-a4b695ac7df0",
            "76deb359-c4bb-408e-9ea9-7b588535cc47",
            "94ebf3a2-dd86-465f-b4d6-ebcf232745d5",
            "14512abb-1ce0-4280-abee-71d2e35783e7",
            "d6a8cc76-0a95-4b8b-8c93-1821c33ee904",
            "6d5e3a6b-2c4e-48b3-bd52-e673860c59ab",
            "21ac7806-2f94-47d9-bd18-c0ebdf7f87d0",
            "2288960b-ca57-4e35-b88c-1e29bc219463",
            "08b6c358-4c01-4fa2-ad46-4146cb43e0b0",
            "1803cdc2-d3b7-4d68-ab3b-07f03b60ecb8",
            "eb1c4186-9280-4a15-8621-a57fe903b1c2",
            "e29d96d8-b327-4f4e-a0a7-ea7b7ffd90cb",
            "e0f41151-d080-4a05-9a15-a65879cfe173",
            "d9341769-18e4-419a-a50a-a52cf4d75381"
          ],
          "failures": [
            "28c7e666-b74f-49e5-875f-5c2cdfd5059c",
            "287bb65d-583f-4e71-a917-953a1ef554c4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "85e5c65a-490e-45f4-b80d-851d284ab3a5",
          "title": "#isObject()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\isobjectTest.js",
          "file": "\\test\\isobjectTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return false for a null parameter",
              "fullTitle": "#isObject() should return false for a null parameter",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isObject(null)).to.equal(false);",
              "err": {},
              "uuid": "50e8ed3c-89ed-40a4-9b51-1dc3fb2ed6d6",
              "parentUUID": "85e5c65a-490e-45f4-b80d-851d284ab3a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a function",
              "fullTitle": "#isObject() should return true for a function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isObject(passedAsParameter)).to.equal(true);",
              "err": {},
              "uuid": "30f3b844-fcb5-4017-8354-32e8bb1c3df6",
              "parentUUID": "85e5c65a-490e-45f4-b80d-851d284ab3a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty object",
              "fullTitle": "#isObject() should return true for an empty object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isObject({})).to.equal(true);",
              "err": {},
              "uuid": "00828715-b83c-4a98-90ef-e6618f74cab3",
              "parentUUID": "85e5c65a-490e-45f4-b80d-851d284ab3a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty array",
              "fullTitle": "#isObject() should return true for an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isObject([])).to.equal(true);",
              "err": {},
              "uuid": "6eec06cc-b2df-4d5f-937d-48a468e7f8b4",
              "parentUUID": "85e5c65a-490e-45f4-b80d-851d284ab3a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a regular expression",
              "fullTitle": "#isObject() should return true for a regular expression",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isObject(re)).to.equal(true);",
              "err": {},
              "uuid": "f4a29673-3785-421e-82eb-3ca481a27ed8",
              "parentUUID": "85e5c65a-490e-45f4-b80d-851d284ab3a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-object parameter",
              "fullTitle": "#isObject() should return false for a non-object parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isObject(123)).to.equal(false);",
              "err": {},
              "uuid": "1aecebe3-c9c1-4b4f-be1a-33ecafcb6069",
              "parentUUID": "85e5c65a-490e-45f4-b80d-851d284ab3a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "50e8ed3c-89ed-40a4-9b51-1dc3fb2ed6d6",
            "30f3b844-fcb5-4017-8354-32e8bb1c3df6",
            "00828715-b83c-4a98-90ef-e6618f74cab3",
            "6eec06cc-b2df-4d5f-937d-48a468e7f8b4",
            "f4a29673-3785-421e-82eb-3ca481a27ed8",
            "1aecebe3-c9c1-4b4f-be1a-33ecafcb6069"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9707d208-699c-4521-bed0-57d0135c8874",
          "title": "#toString()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\tostringTest.js",
          "file": "\\test\\tostringTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return string when parameter is already string",
              "fullTitle": "#toString() should return string when parameter is already string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString('test')).to.equal('test');",
              "err": {},
              "uuid": "b7265f08-d5d4-4130-9ff9-e65eb71b0b31",
              "parentUUID": "9707d208-699c-4521-bed0-57d0135c8874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty string when converted from null",
              "fullTitle": "#toString() should return empty string when converted from null",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toString(null)).to.equal('');",
              "err": {
                "message": "AssertionError: expected 'null' to equal ''",
                "estack": "AssertionError: expected 'null' to equal ''\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/tostringTest.js:11:33)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- null\n"
              },
              "uuid": "0c66698f-d943-4943-955e-77403c46362a",
              "parentUUID": "9707d208-699c-4521-bed0-57d0135c8874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty string when converted from undefined",
              "fullTitle": "#toString() should return empty string when converted from undefined",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toString(undefined)).to.equal('');",
              "err": {
                "message": "AssertionError: expected 'undefined' to equal ''",
                "estack": "AssertionError: expected 'undefined' to equal ''\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/tostringTest.js:15:38)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- undefined\n"
              },
              "uuid": "cfa280e4-de64-4cba-a7e4-b0f1e98e5c94",
              "parentUUID": "9707d208-699c-4521-bed0-57d0135c8874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from array",
              "fullTitle": "#toString() should return string when converted from array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 3];\nexpect(toString(numbers)).to.equal('1,2,3');",
              "err": {},
              "uuid": "e810839f-9b28-4e4e-b1be-604c6e604f10",
              "parentUUID": "9707d208-699c-4521-bed0-57d0135c8874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from number",
              "fullTitle": "#toString() should return string when converted from number",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(-3)).to.equal('-3');\nexpect(toString(1.234)).to.equal('1.234');",
              "err": {},
              "uuid": "cf75d892-9a16-484e-ab81-320049fd0623",
              "parentUUID": "9707d208-699c-4521-bed0-57d0135c8874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from sign -0",
              "fullTitle": "#toString() should return string when converted from sign -0",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(-0)).to.equal('-0');",
              "err": {},
              "uuid": "d0a0e350-1da2-4b21-b774-7c83b2fa0188",
              "parentUUID": "9707d208-699c-4521-bed0-57d0135c8874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from symbol",
              "fullTitle": "#toString() should return string when converted from symbol",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const symbol = Symbol('test');\nexpect(toString(symbol)).to.equal('Symbol(test)');",
              "err": {},
              "uuid": "283fb3f7-9e97-4311-895e-6a47e97800dc",
              "parentUUID": "9707d208-699c-4521-bed0-57d0135c8874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from object",
              "fullTitle": "#toString() should return string when converted from object",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const obj1 = {test: 'testcase'}\nexpect(toString(obj1)).to.equal('{test: \"testcase\"}');",
              "err": {
                "message": "AssertionError: expected '[object Object]' to equal '{test: \"testcase\"}'",
                "estack": "AssertionError: expected '[object Object]' to equal '{test: \"testcase\"}'\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/tostringTest.js:39:33)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- [object Object]\n+ {test: \"testcase\"}\n"
              },
              "uuid": "4c38905c-0f9b-4852-9b52-1116717e3450",
              "parentUUID": "9707d208-699c-4521-bed0-57d0135c8874",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7265f08-d5d4-4130-9ff9-e65eb71b0b31",
            "e810839f-9b28-4e4e-b1be-604c6e604f10",
            "cf75d892-9a16-484e-ab81-320049fd0623",
            "d0a0e350-1da2-4b21-b774-7c83b2fa0188",
            "283fb3f7-9e97-4311-895e-6a47e97800dc"
          ],
          "failures": [
            "0c66698f-d943-4943-955e-77403c46362a",
            "cfa280e4-de64-4cba-a7e4-b0f1e98e5c94",
            "4c38905c-0f9b-4852-9b52-1116717e3450"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b0d4e198-02f0-4106-8215-87ee2eb7b1e0",
          "title": "#upperFirst()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\upperfirstTest.js",
          "file": "\\test\\upperfirstTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should capitalize only the first letter",
              "fullTitle": "#upperFirst() should capitalize only the first letter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst('upperfirst')).to.equal('Upperfirst');",
              "err": {},
              "uuid": "fcdd4927-92b1-4ead-9230-07fc1f32e898",
              "parentUUID": "b0d4e198-02f0-4106-8215-87ee2eb7b1e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string as it is if all letters are already capitalized",
              "fullTitle": "#upperFirst() should return string as it is if all letters are already capitalized",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst('ALLCAPS')).to.equal('ALLCAPS');",
              "err": {},
              "uuid": "0de5f320-cbaf-4298-a11e-1bc367c5a86f",
              "parentUUID": "b0d4e198-02f0-4106-8215-87ee2eb7b1e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string as it is if it cant be capitalized (special characters)",
              "fullTitle": "#upperFirst() should return string as it is if it cant be capitalized (special characters)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst(\"#¤%&\")).to.equal(\"#¤%&\");",
              "err": {},
              "uuid": "09574757-f508-411a-bfeb-3385eba0035d",
              "parentUUID": "b0d4e198-02f0-4106-8215-87ee2eb7b1e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fcdd4927-92b1-4ead-9230-07fc1f32e898",
            "0de5f320-cbaf-4298-a11e-1bc367c5a86f",
            "09574757-f508-411a-bfeb-3385eba0035d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}