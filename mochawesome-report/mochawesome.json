{
  "stats": {
    "suites": 10,
    "tests": 100,
    "passes": 72,
    "pending": 0,
    "failures": 28,
    "start": "2021-12-01T18:37:38.570Z",
    "end": "2021-12-01T18:37:39.077Z",
    "duration": 507,
    "testsRegistered": 100,
    "passPercent": 72,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6f5c1e72-febe-4519-89d0-84c03db82301",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "83f524a8-da44-4634-be22-69febcccc27b",
          "title": "#capitalize()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\capitalizeTest.js",
          "file": "\\test\\capitalizeTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should only keep the first letter capitalized",
              "fullTitle": "#capitalize() should only keep the first letter capitalized",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"ALLCAPS\")).to.equal(\"Allcaps\");",
              "err": {},
              "uuid": "8b5a6638-5276-451a-a2a2-7735003833fb",
              "parentUUID": "83f524a8-da44-4634-be22-69febcccc27b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the string as it is",
              "fullTitle": "#capitalize() should return the string as it is",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"Capitalized\")).to.equal(\"Capitalized\");",
              "err": {},
              "uuid": "971e8a0d-2199-419e-98af-1c5773aa339f",
              "parentUUID": "83f524a8-da44-4634-be22-69febcccc27b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should capitalize the first letter only",
              "fullTitle": "#capitalize() should capitalize the first letter only",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"lowercase\")).to.equal(\"Lowercase\");",
              "err": {},
              "uuid": "a41752aa-aca8-4e96-96b4-7ae0e2ce7ad8",
              "parentUUID": "83f524a8-da44-4634-be22-69febcccc27b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return the string as it is if it cant be capitalized (symbols)",
              "fullTitle": "#capitalize() should return the string as it is if it cant be capitalized (symbols)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(\"#¤%&\")).to.equal(\"#¤%&\");",
              "err": {},
              "uuid": "6848ec82-c557-4bdf-8dad-d8f4acf02fa2",
              "parentUUID": "83f524a8-da44-4634-be22-69febcccc27b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for a null parameter",
              "fullTitle": "#capitalize() should throw an error for a null parameter",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(null)).to.throw();",
              "err": {
                "message": "AssertionError: expected 'Null' to be a function",
                "estack": "AssertionError: expected 'Null' to be a function\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/capitalizeTest.js:23:38)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "9d9aacf1-89e8-4280-a028-94da3ae7c222",
              "parentUUID": "83f524a8-da44-4634-be22-69febcccc27b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for an object",
              "fullTitle": "#capitalize() should throw an error for an object",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(new Date())).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected 'Wed dec 01 2021 20:37:38 gmt+0200 (itä-euroopan normaaliaika)' to be a function",
                "estack": "AssertionError: expected 'Wed dec 01 2021 20:37:38 gmt+0200 (itä-euroopan normaaliaika)' to be a function\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/capitalizeTest.js:28:44)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "2a7bf8e5-ea72-4242-a08d-01a9ef975ff0",
              "parentUUID": "83f524a8-da44-4634-be22-69febcccc27b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for an array",
              "fullTitle": "#capitalize() should throw an error for an array",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(['t', 'e', 's', 't'])).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected 'T,e,s,t' to be a function",
                "estack": "AssertionError: expected 'T,e,s,t' to be a function\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/capitalizeTest.js:33:54)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "46af964b-b941-48e3-a49e-914fbed9947c",
              "parentUUID": "83f524a8-da44-4634-be22-69febcccc27b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b5a6638-5276-451a-a2a2-7735003833fb",
            "971e8a0d-2199-419e-98af-1c5773aa339f",
            "a41752aa-aca8-4e96-96b4-7ae0e2ce7ad8",
            "6848ec82-c557-4bdf-8dad-d8f4acf02fa2"
          ],
          "failures": [
            "9d9aacf1-89e8-4280-a028-94da3ae7c222",
            "2a7bf8e5-ea72-4242-a08d-01a9ef975ff0",
            "46af964b-b941-48e3-a49e-914fbed9947c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
          "title": "#ceil()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\ceilTest.js",
          "file": "\\test\\ceilTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return rounded up integer when precision is 0 (default)",
              "fullTitle": "#ceil() should return rounded up integer when precision is 0 (default)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(1.2345)).to.equal(2);",
              "err": {},
              "uuid": "a7f6839f-9b81-4b21-bfc0-6678a682fe27",
              "parentUUID": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set precision to 0 when null is given as a second parameter",
              "fullTitle": "#ceil() should set precision to 0 when null is given as a second parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(1.23, null)).to.equal(2);",
              "err": {},
              "uuid": "2c967e1f-a660-4702-abb5-af99ac9fc2a0",
              "parentUUID": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return rounded up number with two decimals when precision is 2",
              "fullTitle": "#ceil() should return rounded up number with two decimals when precision is 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(1.2345, 2)).to.equal(1.24);",
              "err": {},
              "uuid": "02adfe42-15e6-45ad-be1c-a9eb6f40a9eb",
              "parentUUID": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return rounded up integer when precision is negative number",
              "fullTitle": "#ceil() should return rounded up integer when precision is negative number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(1234, -2)).to.equal(1300);",
              "err": {},
              "uuid": "6612459d-6fcf-4182-804f-7595ca3ff1b9",
              "parentUUID": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return rounded up integer when precision is 0 (default) and given number is negative",
              "fullTitle": "#ceil() should return rounded up integer when precision is 0 (default) and given number is negative",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(-2.34)).to.equal(-2);",
              "err": {},
              "uuid": "65f8ba6e-488c-4b04-99c4-597de60d5c84",
              "parentUUID": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return number with two decimals (.00) when given value is integer and precision is 2",
              "fullTitle": "#ceil() should return number with two decimals (.00) when given value is integer and precision is 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(2, 2)).to.equal(2.00);",
              "err": {},
              "uuid": "5b2dfaa5-3bbb-4cc2-ad02-e07c1e688fd4",
              "parentUUID": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when given value is 0",
              "fullTitle": "#ceil() should return 0 when given value is 0",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(0)).to.equal(0);",
              "err": {},
              "uuid": "4f236c0a-efea-46bf-be0a-e78541f47b5c",
              "parentUUID": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0.000 when given value is 0 and precision is 3",
              "fullTitle": "#ceil() should return 0.000 when given value is 0 and precision is 3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(0, 3)).to.equal(0.000);",
              "err": {},
              "uuid": "e0975315-78c0-49dd-bee9-284fc970abef",
              "parentUUID": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for a null parameter",
              "fullTitle": "#ceil() should throw an error for a null parameter",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.throws(function () { ceil(null) }, Error);",
              "err": {
                "message": "AssertionError: expected [Function] to throw Error",
                "estack": "AssertionError: expected [Function] to throw Error\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/ceilTest.js:43:14)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "178f573f-ddcd-42e3-8b00-4c88eac52652",
              "parentUUID": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for an undefined parameter",
              "fullTitle": "#ceil() should throw an error for an undefined parameter",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.throws(function () { ceil(undefined) }, Error);",
              "err": {
                "message": "AssertionError: expected [Function] to throw Error",
                "estack": "AssertionError: expected [Function] to throw Error\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/ceilTest.js:47:14)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "8e4d419b-aede-41ad-8213-daff046ca736",
              "parentUUID": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for wrong parameter type (string)",
              "fullTitle": "#ceil() should throw an error for wrong parameter type (string)",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.throws(function () { ceil(\"test\") }, Error);",
              "err": {
                "message": "AssertionError: expected [Function] to throw Error",
                "estack": "AssertionError: expected [Function] to throw Error\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/ceilTest.js:51:14)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "4fd51815-96af-496c-9d75-68fe24c3e398",
              "parentUUID": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return rounded up integer when given value is 0 and precision is negative number",
              "fullTitle": "#ceil() should return rounded up integer when given value is 0 and precision is negative number",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(ceil(0, -2)).to.equal(100);",
              "err": {
                "message": "AssertionError: expected 0 to equal 100",
                "estack": "AssertionError: expected 0 to equal 100\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/ceilTest.js:56:30)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- 0\n+ 100\n"
              },
              "uuid": "b79e9cf0-30ad-4209-8507-0df37b66a58a",
              "parentUUID": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return rounded up integer when given value is positive integer and precision is negative number",
              "fullTitle": "#ceil() should return rounded up integer when given value is positive integer and precision is negative number",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(1, -1)).to.equal(10);",
              "err": {},
              "uuid": "5d5726aa-3297-4b7f-b263-33971564a0c9",
              "parentUUID": "9f119bb2-41e5-4f73-bdcd-224ee1ab926a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7f6839f-9b81-4b21-bfc0-6678a682fe27",
            "2c967e1f-a660-4702-abb5-af99ac9fc2a0",
            "02adfe42-15e6-45ad-be1c-a9eb6f40a9eb",
            "6612459d-6fcf-4182-804f-7595ca3ff1b9",
            "65f8ba6e-488c-4b04-99c4-597de60d5c84",
            "5b2dfaa5-3bbb-4cc2-ad02-e07c1e688fd4",
            "4f236c0a-efea-46bf-be0a-e78541f47b5c",
            "e0975315-78c0-49dd-bee9-284fc970abef",
            "5d5726aa-3297-4b7f-b263-33971564a0c9"
          ],
          "failures": [
            "178f573f-ddcd-42e3-8b00-4c88eac52652",
            "8e4d419b-aede-41ad-8213-daff046ca736",
            "4fd51815-96af-496c-9d75-68fe24c3e398",
            "b79e9cf0-30ad-4209-8507-0df37b66a58a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a8cc4083-9606-403f-930c-db4814fcff89",
          "title": "#defaultToAny()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\defaulttoanyTest.js",
          "file": "\\test\\defaulttoanyTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return given value if it is a number",
              "fullTitle": "#defaultToAny() should return given value if it is a number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(1, 2, 3)).to.equal(1);",
              "err": {},
              "uuid": "ce217f50-0445-408a-879e-ab9a299fd9b1",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is a string",
              "fullTitle": "#defaultToAny() should return given value if it is a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(\"test\", 2, 3)).to.equal(\"test\");",
              "err": {},
              "uuid": "a560d3bc-e7d8-46f9-ac9a-85863ffd5f79",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is an array",
              "fullTitle": "#defaultToAny() should return given value if it is an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(array1, 2, 3)).to.equal(array1);",
              "err": {},
              "uuid": "7af980f2-fef2-4a75-85e1-306280e9fd22",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is an object",
              "fullTitle": "#defaultToAny() should return given value if it is an object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(array1, 2, 3)).to.equal(array1);",
              "err": {},
              "uuid": "d6349397-9659-4265-97bf-9f02e43e14d3",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is a symbol",
              "fullTitle": "#defaultToAny() should return given value if it is a symbol",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(symbol1, 2, 3)).to.equal(symbol1);",
              "err": {},
              "uuid": "1e8ac89d-17e0-4d12-a5c7-d40ba6971564",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return first default value (number) if given value is NaN",
              "fullTitle": "#defaultToAny() should return first default value (number) if given value is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(NaN, 1, 2)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoanyTest.js:35:42)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "cbcbd08f-1a62-418a-a468-59fdc3fc476c",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return first default value (number) if given value is null",
              "fullTitle": "#defaultToAny() should return first default value (number) if given value is null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, 1, 2)).to.equal(1);",
              "err": {},
              "uuid": "922e8984-bee3-4bbe-a481-d8016dcce02f",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return first default value (object) if given value is null",
              "fullTitle": "#defaultToAny() should return first default value (object) if given value is null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, obj1, 2)).to.equal(obj1);",
              "err": {},
              "uuid": "d8377f7c-9df4-4807-bf95-2ae6e3d686e6",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return first default value (number) if given value is undefined",
              "fullTitle": "#defaultToAny() should return first default value (number) if given value is undefined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(undefined, 1, 2)).to.equal(1);",
              "err": {},
              "uuid": "0f1abedb-319f-4110-892e-71d4fb3d959f",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (string) if given value is NaN and first default value is NaN",
              "fullTitle": "#defaultToAny() should return second default value (string) if given value is NaN and first default value is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(NaN, NaN, 'test')).to.equal('test');",
              "err": {
                "message": "AssertionError: expected NaN to equal 'test'",
                "estack": "AssertionError: expected NaN to equal 'test'\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoanyTest.js:52:49)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "b3402940-0a95-4089-b528-8272d11c5131",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (number) if given value is NaN and first default value is null",
              "fullTitle": "#defaultToAny() should return second default value (number) if given value is NaN and first default value is null",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(NaN, null, 1)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoanyTest.js:57:45)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "b86a24c7-4579-4a8e-91d2-c2f26ab3ff42",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (number) if given value is null and first default value is NaN",
              "fullTitle": "#defaultToAny() should return second default value (number) if given value is null and first default value is NaN",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, NaN, 1)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoanyTest.js:62:45)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "2eed928b-cb0c-4bd0-a758-874c3ac9146c",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (number) if given value is undefined and first default value is NaN",
              "fullTitle": "#defaultToAny() should return second default value (number) if given value is undefined and first default value is NaN",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(undefined, NaN, 1)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoanyTest.js:67:50)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "f537e53f-1fad-4600-8d75-f02fa397086d",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default (number) value if given value is undefined and first default value is null",
              "fullTitle": "#defaultToAny() should return second default (number) value if given value is undefined and first default value is null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(undefined, null, 1)).to.equal(1);",
              "err": {},
              "uuid": "33ff8cbd-85cc-47ee-a280-6f149033cc0c",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (NaN) if the first two parameters are null",
              "fullTitle": "#defaultToAny() should return second default value (NaN) if the first two parameters are null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, null, NaN)).to.be.NaN;",
              "err": {},
              "uuid": "36a19e7e-ea5c-4801-a9f6-da829e20f823",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (undefined) if the first two parameters are NaN",
              "fullTitle": "#defaultToAny() should return second default value (undefined) if the first two parameters are NaN",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(null, null, undefined)).to.equal(undefined);",
              "err": {},
              "uuid": "9cd24e74-25be-46f2-b080-2b49bade5dde",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return second default value (undefined) if the first two parameters are NaN",
              "fullTitle": "#defaultToAny() should return second default value (undefined) if the first two parameters are NaN",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultToAny(NaN, NaN, undefined)).to.equal(undefined);",
              "err": {
                "message": "AssertionError: expected NaN to equal undefined",
                "estack": "AssertionError: expected NaN to equal undefined\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoanyTest.js:84:52)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "7f2bec3d-3c4e-467a-b7c9-ab8ea95ea3e9",
              "parentUUID": "a8cc4083-9606-403f-930c-db4814fcff89",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ce217f50-0445-408a-879e-ab9a299fd9b1",
            "a560d3bc-e7d8-46f9-ac9a-85863ffd5f79",
            "7af980f2-fef2-4a75-85e1-306280e9fd22",
            "d6349397-9659-4265-97bf-9f02e43e14d3",
            "1e8ac89d-17e0-4d12-a5c7-d40ba6971564",
            "922e8984-bee3-4bbe-a481-d8016dcce02f",
            "d8377f7c-9df4-4807-bf95-2ae6e3d686e6",
            "0f1abedb-319f-4110-892e-71d4fb3d959f",
            "33ff8cbd-85cc-47ee-a280-6f149033cc0c",
            "36a19e7e-ea5c-4801-a9f6-da829e20f823",
            "9cd24e74-25be-46f2-b080-2b49bade5dde"
          ],
          "failures": [
            "cbcbd08f-1a62-418a-a468-59fdc3fc476c",
            "b3402940-0a95-4089-b528-8272d11c5131",
            "b86a24c7-4579-4a8e-91d2-c2f26ab3ff42",
            "2eed928b-cb0c-4bd0-a758-874c3ac9146c",
            "f537e53f-1fad-4600-8d75-f02fa397086d",
            "7f2bec3d-3c4e-467a-b7c9-ab8ea95ea3e9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f2cff80d-9568-471d-b881-d6d016c8b713",
          "title": "#defaultTo()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\defaulttoTest.js",
          "file": "\\test\\defaulttoTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return default value if given value is NaN and default is a number",
              "fullTitle": "#defaultTo() should return default value if given value is NaN and default is a number",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(NaN, 1)).to.equal(1);",
              "err": {
                "message": "AssertionError: expected NaN to equal 1",
                "estack": "AssertionError: expected NaN to equal 1\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoTest.js:8:36)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- NaN\n+ 1\n"
              },
              "uuid": "1954404f-b764-4d2e-8a54-f7ceff034d01",
              "parentUUID": "f2cff80d-9568-471d-b881-d6d016c8b713",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is NaN and default is a string",
              "fullTitle": "#defaultTo() should return default value if given value is NaN and default is a string",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(NaN, 'test')).to.equal('test');",
              "err": {
                "message": "AssertionError: expected NaN to equal 'test'",
                "estack": "AssertionError: expected NaN to equal 'test'\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoTest.js:13:41)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "669cf48a-19d7-4ec6-9d91-90da701082fd",
              "parentUUID": "f2cff80d-9568-471d-b881-d6d016c8b713",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is undefined and default is an array",
              "fullTitle": "#defaultTo() should return default value if given value is undefined and default is an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const array1 = [1, 2, 3]\nexpect(defaultTo(undefined, array1)).to.equal(array1);",
              "err": {},
              "uuid": "5a2e60b2-94fa-4fea-984c-b5b3e49c56ab",
              "parentUUID": "f2cff80d-9568-471d-b881-d6d016c8b713",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is undefined and default is a string",
              "fullTitle": "#defaultTo() should return default value if given value is undefined and default is a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(undefined, 'test')).to.equal('test');",
              "err": {},
              "uuid": "8d3c8495-2144-4ce8-8f8d-f92637f4dbbe",
              "parentUUID": "f2cff80d-9568-471d-b881-d6d016c8b713",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is undefined and default is an object",
              "fullTitle": "#defaultTo() should return default value if given value is undefined and default is an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(undefined, obj1)).to.equal(obj1);",
              "err": {},
              "uuid": "f87b98b5-e65a-41c4-9259-f36657573c90",
              "parentUUID": "f2cff80d-9568-471d-b881-d6d016c8b713",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is null and default is a number",
              "fullTitle": "#defaultTo() should return default value if given value is null and default is a number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(null, 1)).to.equal(1);",
              "err": {},
              "uuid": "8a5bb37f-edc5-4196-9d7c-aca38c1779f6",
              "parentUUID": "f2cff80d-9568-471d-b881-d6d016c8b713",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return default value if given value is null and default is an array",
              "fullTitle": "#defaultTo() should return default value if given value is null and default is an array",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(null, [1,2,3])).to.equal([1,2,3]);",
              "err": {
                "message": "AssertionError: expected [ 1, 2, 3 ] to equal [ 1, 2, 3 ]",
                "estack": "AssertionError: expected [ 1, 2, 3 ] to equal [ 1, 2, 3 ]\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoTest.js:36:43)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": ""
              },
              "uuid": "97ab0a60-f14c-4490-87e0-f0d334d228ec",
              "parentUUID": "f2cff80d-9568-471d-b881-d6d016c8b713",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is a number",
              "fullTitle": "#defaultTo() should return given value if it is a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(1, 2)).to.equal(1);",
              "err": {},
              "uuid": "20a4e4cb-0ce4-4a39-b170-059c7c421987",
              "parentUUID": "f2cff80d-9568-471d-b881-d6d016c8b713",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is a string",
              "fullTitle": "#defaultTo() should return given value if it is a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo('test', 2)).to.equal('test');",
              "err": {},
              "uuid": "7e0c3602-d5f0-41e1-b5b6-2395e9d8467c",
              "parentUUID": "f2cff80d-9568-471d-b881-d6d016c8b713",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is an array",
              "fullTitle": "#defaultTo() should return given value if it is an array",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo([1,2,3], 3)).to.equal([1,2,3]);",
              "err": {
                "message": "AssertionError: expected [ 1, 2, 3 ] to equal [ 1, 2, 3 ]",
                "estack": "AssertionError: expected [ 1, 2, 3 ] to equal [ 1, 2, 3 ]\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/defaulttoTest.js:48:40)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": ""
              },
              "uuid": "f25daf68-2b06-4692-a48d-11ccf6a60911",
              "parentUUID": "f2cff80d-9568-471d-b881-d6d016c8b713",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is a symbol",
              "fullTitle": "#defaultTo() should return given value if it is a symbol",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const symbol = Symbol('test');\nexpect(defaultTo(symbol, 2)).to.equal(symbol);",
              "err": {},
              "uuid": "1afe1a57-c103-4247-8874-25ebcacc01df",
              "parentUUID": "f2cff80d-9568-471d-b881-d6d016c8b713",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return given value if it is an object",
              "fullTitle": "#defaultTo() should return given value if it is an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(obj1, 1)).to.equal(obj1);",
              "err": {},
              "uuid": "31690b51-4ecc-4477-8a24-a8e25d66951c",
              "parentUUID": "f2cff80d-9568-471d-b881-d6d016c8b713",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a2e60b2-94fa-4fea-984c-b5b3e49c56ab",
            "8d3c8495-2144-4ce8-8f8d-f92637f4dbbe",
            "f87b98b5-e65a-41c4-9259-f36657573c90",
            "8a5bb37f-edc5-4196-9d7c-aca38c1779f6",
            "20a4e4cb-0ce4-4a39-b170-059c7c421987",
            "7e0c3602-d5f0-41e1-b5b6-2395e9d8467c",
            "1afe1a57-c103-4247-8874-25ebcacc01df",
            "31690b51-4ecc-4477-8a24-a8e25d66951c"
          ],
          "failures": [
            "1954404f-b764-4d2e-8a54-f7ceff034d01",
            "669cf48a-19d7-4ec6-9d91-90da701082fd",
            "97ab0a60-f14c-4490-87e0-f0d334d228ec",
            "f25daf68-2b06-4692-a48d-11ccf6a60911"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "907e5dc1-d66d-4437-8573-4904bf2702fc",
          "title": "#endsWith()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\endswithTest.js",
          "file": "\\test\\endswithTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true if string 1 ends with string 2",
              "fullTitle": "#endsWith() should return true if string 1 ends with string 2",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('test', 'st')).to.equal(true);",
              "err": {},
              "uuid": "946d8e0d-3dfa-438b-bd98-59913a32b552",
              "parentUUID": "907e5dc1-d66d-4437-8573-4904bf2702fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for identical strings",
              "fullTitle": "#endsWith() should return true for identical strings",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('test', 'test')).to.equal(true);",
              "err": {},
              "uuid": "158579c9-6d44-48ab-93c2-f6cb325fb7b6",
              "parentUUID": "907e5dc1-d66d-4437-8573-4904bf2702fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a correct string, substring and position",
              "fullTitle": "#endsWith() should return true for a correct string, substring and position",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('test', 'es', 3)).to.equal(true);",
              "err": {},
              "uuid": "abec1b13-a8d1-4d50-9465-569c27621db1",
              "parentUUID": "907e5dc1-d66d-4437-8573-4904bf2702fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a faulty string, substring and position",
              "fullTitle": "#endsWith() should return false for a faulty string, substring and position",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('test', 't', 2)).to.equal(false);",
              "err": {},
              "uuid": "54c6abd1-d9d3-4c3e-a042-79ce3a1f26f0",
              "parentUUID": "907e5dc1-d66d-4437-8573-4904bf2702fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should account for a too high position number and return true",
              "fullTitle": "#endsWith() should account for a too high position number and return true",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('qwerty', 'rty', 12)).to.equal(true);",
              "err": {},
              "uuid": "b423f0b3-a61f-4294-ad76-92a60e373cf8",
              "parentUUID": "907e5dc1-d66d-4437-8573-4904bf2702fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should account for negative indexes and return true",
              "fullTitle": "#endsWith() should account for negative indexes and return true",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('qwerty', 't', -2)).to.equal(true);",
              "err": {
                "message": "AssertionError: expected false to equal true",
                "estack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/endswithTest.js:27:46)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "b1f86981-0cee-4305-88fa-96dc9d3c6c41",
              "parentUUID": "907e5dc1-d66d-4437-8573-4904bf2702fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for a non-number position",
              "fullTitle": "#endsWith() should throw an error for a non-number position",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('qwerty', 'q', 'test')).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected false to be a function",
                "estack": "AssertionError: expected false to be a function\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/endswithTest.js:32:53)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "5be415ba-d6b6-4082-9acf-dcbda04fca9a",
              "parentUUID": "907e5dc1-d66d-4437-8573-4904bf2702fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for a non-integer position",
              "fullTitle": "#endsWith() should throw an error for a non-integer position",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('qwerty', 'q', 1.25)).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected true to be a function",
                "estack": "AssertionError: expected true to be a function\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/endswithTest.js:37:51)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "1f528f45-e577-42e0-86a3-dc04c0df708b",
              "parentUUID": "907e5dc1-d66d-4437-8573-4904bf2702fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for a null position",
              "fullTitle": "#endsWith() should throw an error for a null position",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(endsWith('qwerty', 'ty', null)).to.throw(TypeError);",
              "err": {
                "message": "AssertionError: expected false to be a function",
                "estack": "AssertionError: expected false to be a function\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/endswithTest.js:42:54)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "03357333-60a8-43a3-af08-f24f51fc07bc",
              "parentUUID": "907e5dc1-d66d-4437-8573-4904bf2702fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "946d8e0d-3dfa-438b-bd98-59913a32b552",
            "158579c9-6d44-48ab-93c2-f6cb325fb7b6",
            "abec1b13-a8d1-4d50-9465-569c27621db1",
            "54c6abd1-d9d3-4c3e-a042-79ce3a1f26f0",
            "b423f0b3-a61f-4294-ad76-92a60e373cf8"
          ],
          "failures": [
            "b1f86981-0cee-4305-88fa-96dc9d3c6c41",
            "5be415ba-d6b6-4082-9acf-dcbda04fca9a",
            "1f528f45-e577-42e0-86a3-dc04c0df708b",
            "03357333-60a8-43a3-af08-f24f51fc07bc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "69869f9e-0d18-4c1b-b39e-e94b2ee17fcd",
          "title": "#isArrayLike()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\isarraylikeTest.js",
          "file": "\\test\\isarraylikeTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return false for a function",
              "fullTitle": "#isArrayLike() should return false for a function",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLike(passedAsParameter)).to.equal(false);",
              "err": {},
              "uuid": "3fb32718-4645-4bfd-aacc-cc44b9d53f96",
              "parentUUID": "69869f9e-0d18-4c1b-b39e-e94b2ee17fcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a filled array",
              "fullTitle": "#isArrayLike() should return true for a filled array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLike(['a', 'b'])).to.equal(true);",
              "err": {},
              "uuid": "8b1ee6d8-5373-4783-8d28-a248bb8387d2",
              "parentUUID": "69869f9e-0d18-4c1b-b39e-e94b2ee17fcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty array",
              "fullTitle": "#isArrayLike() should return true for an empty array",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLike([])).to.equal(true);",
              "err": {},
              "uuid": "797cebf5-3220-4c1b-a779-2ef3d8f500e8",
              "parentUUID": "69869f9e-0d18-4c1b-b39e-e94b2ee17fcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a variable with no length",
              "fullTitle": "#isArrayLike() should return false for a variable with no length",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLike(24)).to.equal(false);",
              "err": {},
              "uuid": "9128537f-c72c-4163-8953-ebcf92ebcc5b",
              "parentUUID": "69869f9e-0d18-4c1b-b39e-e94b2ee17fcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a null parameter",
              "fullTitle": "#isArrayLike() should return false for a null parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isArrayLike(null)).to.equal(false);",
              "err": {},
              "uuid": "605f66c6-dc6d-41ce-b4b3-fc0662042f47",
              "parentUUID": "69869f9e-0d18-4c1b-b39e-e94b2ee17fcd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3fb32718-4645-4bfd-aacc-cc44b9d53f96",
            "8b1ee6d8-5373-4783-8d28-a248bb8387d2",
            "797cebf5-3220-4c1b-a779-2ef3d8f500e8",
            "9128537f-c72c-4163-8953-ebcf92ebcc5b",
            "605f66c6-dc6d-41ce-b4b3-fc0662042f47"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
          "title": "#isEmpty()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\isemptyTest.js",
          "file": "\\test\\isemptyTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return true for null",
              "fullTitle": "#isEmpty() should return true for null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(null)).to.equal(true);",
              "err": {},
              "uuid": "6484de1a-3632-4673-8ba2-d020bffcd94a",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty array",
              "fullTitle": "#isEmpty() should return true for an empty array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty([])).to.equal(true);",
              "err": {},
              "uuid": "df03e6e1-eb1e-4bdc-9f94-f9ac8a3feb46",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty array",
              "fullTitle": "#isEmpty() should return false for a non-empty array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty([0, 1, 2])).to.equal(false);",
              "err": {},
              "uuid": "1d9e6ee2-9463-4215-9423-b688fcb1a62c",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty string",
              "fullTitle": "#isEmpty() should return true for an empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(\"\")).to.equal(true);",
              "err": {},
              "uuid": "14b263ff-bc5f-4694-b203-e6d2e4c896c2",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty string",
              "fullTitle": "#isEmpty() should return false for a non-empty string",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty('test')).to.equal(false);",
              "err": {},
              "uuid": "1bc84304-affd-4ab0-8d91-d0e98fbe2299",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty map",
              "fullTitle": "#isEmpty() should return true for an empty map",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(map1)).to.equal(true);",
              "err": {},
              "uuid": "db33a77d-5fa0-4117-ba12-9d459eeb5b7d",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty map",
              "fullTitle": "#isEmpty() should return false for a non-empty map",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(map2)).to.equal(false);",
              "err": {},
              "uuid": "6cba257b-0e6e-4385-bfae-e7b293f43be4",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty set",
              "fullTitle": "#isEmpty() should return true for an empty set",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(set1)).to.equal(true);",
              "err": {},
              "uuid": "be81ffbb-a151-4c87-88c6-c15577aa8286",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty set",
              "fullTitle": "#isEmpty() should return false for a non-empty set",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(set2)).to.equal(false);",
              "err": {},
              "uuid": "f2caeb70-1fe2-477a-9f5d-d6adc7ff8bd5",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty object",
              "fullTitle": "#isEmpty() should return true for an empty object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(obj1)).to.equal(true);",
              "err": {},
              "uuid": "13032f27-166b-4304-9146-2efd2a8596c7",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty object",
              "fullTitle": "#isEmpty() should return false for a non-empty object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(obj2)).to.equal(false);",
              "err": {},
              "uuid": "0cc57c18-5dce-4151-a8c5-bd7c5aa18c6d",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty prototype object",
              "fullTitle": "#isEmpty() should return true for an empty prototype object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(Object.getPrototypeOf(obj1))).to.equal(true);",
              "err": {},
              "uuid": "d03d251f-6e27-4f77-bfe1-cbaac265a6ad",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty prototype object",
              "fullTitle": "#isEmpty() should return false for a non-empty prototype object",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(Object.getPrototypeOf(obj2))).to.equal(false);",
              "err": {
                "message": "AssertionError: expected true to equal false",
                "estack": "AssertionError: expected true to equal false\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/isemptyTest.js:72:55)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "a39b4f1b-2a05-42b2-a956-19fab4aa4e40",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty buffer",
              "fullTitle": "#isEmpty() should return true for an empty buffer",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(buf1)).to.equal(true);",
              "err": {
                "message": "AssertionError: expected false to equal true",
                "estack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/isemptyTest.js:80:32)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "bd726686-d4ad-49e4-80e1-7d0e06ae6d65",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty buffer",
              "fullTitle": "#isEmpty() should return false for a non-empty buffer",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(buf2)).to.equal(false);",
              "err": {},
              "uuid": "fbbf1710-9baa-46e4-91d5-15ba9f0563b6",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty TypedArray",
              "fullTitle": "#isEmpty() should return true for an empty TypedArray",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(typedArray1)).to.equal(true);",
              "err": {},
              "uuid": "4f51a393-c1a9-46c0-bfca-63eeddf1c49b",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-empty TypedArray",
              "fullTitle": "#isEmpty() should return false for a non-empty TypedArray",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(typedArray2)).to.equal(false);",
              "err": {},
              "uuid": "c40da15c-9ffd-4b84-844e-7a4b32cedc55",
              "parentUUID": "674f7298-0b5e-4672-8b58-eb9b8d7881c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6484de1a-3632-4673-8ba2-d020bffcd94a",
            "df03e6e1-eb1e-4bdc-9f94-f9ac8a3feb46",
            "1d9e6ee2-9463-4215-9423-b688fcb1a62c",
            "14b263ff-bc5f-4694-b203-e6d2e4c896c2",
            "1bc84304-affd-4ab0-8d91-d0e98fbe2299",
            "db33a77d-5fa0-4117-ba12-9d459eeb5b7d",
            "6cba257b-0e6e-4385-bfae-e7b293f43be4",
            "be81ffbb-a151-4c87-88c6-c15577aa8286",
            "f2caeb70-1fe2-477a-9f5d-d6adc7ff8bd5",
            "13032f27-166b-4304-9146-2efd2a8596c7",
            "0cc57c18-5dce-4151-a8c5-bd7c5aa18c6d",
            "d03d251f-6e27-4f77-bfe1-cbaac265a6ad",
            "fbbf1710-9baa-46e4-91d5-15ba9f0563b6",
            "4f51a393-c1a9-46c0-bfca-63eeddf1c49b",
            "c40da15c-9ffd-4b84-844e-7a4b32cedc55"
          ],
          "failures": [
            "a39b4f1b-2a05-42b2-a956-19fab4aa4e40",
            "bd726686-d4ad-49e4-80e1-7d0e06ae6d65"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9a22daf1-173c-4f88-a84f-a83daa617b35",
          "title": "#isObject()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\isobjectTest.js",
          "file": "\\test\\isobjectTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return false for a null parameter",
              "fullTitle": "#isObject() should return false for a null parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isObject(null)).to.equal(false);",
              "err": {},
              "uuid": "180e1240-f6b0-453c-8d0a-8b6bd5c77132",
              "parentUUID": "9a22daf1-173c-4f88-a84f-a83daa617b35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a function",
              "fullTitle": "#isObject() should return true for a function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isObject(passedAsParameter)).to.equal(true);",
              "err": {},
              "uuid": "4e654c6d-a19d-4459-bc0a-6ee1dbc9f6b6",
              "parentUUID": "9a22daf1-173c-4f88-a84f-a83daa617b35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty object",
              "fullTitle": "#isObject() should return true for an empty object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isObject({})).to.equal(true);",
              "err": {},
              "uuid": "94edb869-8bf7-4cd1-a40c-6d9f3791e0b6",
              "parentUUID": "9a22daf1-173c-4f88-a84f-a83daa617b35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty array",
              "fullTitle": "#isObject() should return true for an empty array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isObject([])).to.equal(true);",
              "err": {},
              "uuid": "e981e136-a35d-455e-82fc-ef97ce779c8b",
              "parentUUID": "9a22daf1-173c-4f88-a84f-a83daa617b35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for a regular expression",
              "fullTitle": "#isObject() should return true for a regular expression",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isObject(re)).to.equal(true);",
              "err": {},
              "uuid": "58225a4a-9faa-4239-ae5d-978cbe16ed87",
              "parentUUID": "9a22daf1-173c-4f88-a84f-a83daa617b35",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for a non-object parameter",
              "fullTitle": "#isObject() should return false for a non-object parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isObject(123)).to.equal(false);",
              "err": {},
              "uuid": "07add53c-568e-4fc8-b5b2-950f18237547",
              "parentUUID": "9a22daf1-173c-4f88-a84f-a83daa617b35",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "180e1240-f6b0-453c-8d0a-8b6bd5c77132",
            "4e654c6d-a19d-4459-bc0a-6ee1dbc9f6b6",
            "94edb869-8bf7-4cd1-a40c-6d9f3791e0b6",
            "e981e136-a35d-455e-82fc-ef97ce779c8b",
            "58225a4a-9faa-4239-ae5d-978cbe16ed87",
            "07add53c-568e-4fc8-b5b2-950f18237547"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "08a109bc-8208-4ee5-ac85-90e76de19af9",
          "title": "#toString()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\tostringTest.js",
          "file": "\\test\\tostringTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return string when parameter is already string",
              "fullTitle": "#toString() should return string when parameter is already string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString('test')).to.equal('test');",
              "err": {},
              "uuid": "9e22c656-f469-4b22-8bc4-4b498265a8c4",
              "parentUUID": "08a109bc-8208-4ee5-ac85-90e76de19af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty string when converted from null",
              "fullTitle": "#toString() should return empty string when converted from null",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toString(null)).to.equal('');",
              "err": {
                "message": "AssertionError: expected 'null' to equal ''",
                "estack": "AssertionError: expected 'null' to equal ''\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/tostringTest.js:12:33)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- null\n"
              },
              "uuid": "f3286208-fd34-4f24-bc9e-793ed98e74c0",
              "parentUUID": "08a109bc-8208-4ee5-ac85-90e76de19af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return empty string when converted from undefined",
              "fullTitle": "#toString() should return empty string when converted from undefined",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(toString(undefined)).to.equal('');",
              "err": {
                "message": "AssertionError: expected 'undefined' to equal ''",
                "estack": "AssertionError: expected 'undefined' to equal ''\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/tostringTest.js:17:38)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- undefined\n"
              },
              "uuid": "399f4b5c-8d30-49a5-9634-24512874f504",
              "parentUUID": "08a109bc-8208-4ee5-ac85-90e76de19af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from array",
              "fullTitle": "#toString() should return string when converted from array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const numbers = [1, 2, 3];\nexpect(toString(numbers)).to.equal('1,2,3');",
              "err": {},
              "uuid": "8518db56-72d1-45c8-8651-15117f92d2c7",
              "parentUUID": "08a109bc-8208-4ee5-ac85-90e76de19af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from number",
              "fullTitle": "#toString() should return string when converted from number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(-3)).to.equal('-3');\nexpect(toString(1.234)).to.equal('1.234');",
              "err": {},
              "uuid": "8cbbe2f5-efd4-4bdd-8863-c7df5876e725",
              "parentUUID": "08a109bc-8208-4ee5-ac85-90e76de19af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from sign -0",
              "fullTitle": "#toString() should return string when converted from sign -0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(toString(-0)).to.equal('-0');",
              "err": {},
              "uuid": "a5ce2a2c-700a-460d-ad0b-3c4a60651676",
              "parentUUID": "08a109bc-8208-4ee5-ac85-90e76de19af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from symbol",
              "fullTitle": "#toString() should return string when converted from symbol",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const symbol = Symbol('test');\nexpect(toString(symbol)).to.equal('Symbol(test)');",
              "err": {},
              "uuid": "f8d0ab0f-8940-47c5-a560-bac8879aeac9",
              "parentUUID": "08a109bc-8208-4ee5-ac85-90e76de19af9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string when converted from object",
              "fullTitle": "#toString() should return string when converted from object",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const obj1 = {test: 'testcase'}\nexpect(toString(obj1)).to.equal('{test: \"testcase\"}');",
              "err": {
                "message": "AssertionError: expected '[object Object]' to equal '{test: \"testcase\"}'",
                "estack": "AssertionError: expected '[object Object]' to equal '{test: \"testcase\"}'\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/tostringTest.js:41:33)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": "- [object Object]\n+ {test: \"testcase\"}\n"
              },
              "uuid": "4bcf747a-4d9f-4d4e-b9de-c5fb72e69db5",
              "parentUUID": "08a109bc-8208-4ee5-ac85-90e76de19af9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9e22c656-f469-4b22-8bc4-4b498265a8c4",
            "8518db56-72d1-45c8-8651-15117f92d2c7",
            "8cbbe2f5-efd4-4bdd-8863-c7df5876e725",
            "a5ce2a2c-700a-460d-ad0b-3c4a60651676",
            "f8d0ab0f-8940-47c5-a560-bac8879aeac9"
          ],
          "failures": [
            "f3286208-fd34-4f24-bc9e-793ed98e74c0",
            "399f4b5c-8d30-49a5-9634-24512874f504",
            "4bcf747a-4d9f-4d4e-b9de-c5fb72e69db5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3170d020-2fd9-4b2a-96d2-9001993a3a10",
          "title": "#upperFirst()",
          "fullFile": "C:\\Users\\Omistaja\\Software-testing\\test\\upperfirstTest.js",
          "file": "\\test\\upperfirstTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should capitalize only the first letter",
              "fullTitle": "#upperFirst() should capitalize only the first letter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst('upperfirst')).to.equal('Upperfirst');",
              "err": {},
              "uuid": "f009a53a-2a62-47ad-9445-fc7ca4edeee7",
              "parentUUID": "3170d020-2fd9-4b2a-96d2-9001993a3a10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string as it is if all letters are already capitalized",
              "fullTitle": "#upperFirst() should return string as it is if all letters are already capitalized",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst('ALLCAPS')).to.equal('ALLCAPS');",
              "err": {},
              "uuid": "ee10753a-d8b4-4720-9cf8-76ec36a32e65",
              "parentUUID": "3170d020-2fd9-4b2a-96d2-9001993a3a10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return string as it is if it cant be capitalized (special characters)",
              "fullTitle": "#upperFirst() should return string as it is if it cant be capitalized (special characters)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(upperFirst(\"#¤%&\")).to.equal(\"#¤%&\");",
              "err": {},
              "uuid": "562a1c64-8fc6-4914-a649-067b69e65919",
              "parentUUID": "3170d020-2fd9-4b2a-96d2-9001993a3a10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if parameter type is not a string",
              "fullTitle": "#upperFirst() should throw an error if parameter type is not a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(function () { upperFirst(3) }, Error);",
              "err": {},
              "uuid": "868f0abd-9c7c-4a79-8611-b1c565129232",
              "parentUUID": "3170d020-2fd9-4b2a-96d2-9001993a3a10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if parameter is null",
              "fullTitle": "#upperFirst() should throw an error if parameter is null",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.throws(function () { upperFirst(null) }, Error);",
              "err": {
                "message": "AssertionError: expected [Function] to throw Error",
                "estack": "AssertionError: expected [Function] to throw Error\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/upperfirstTest.js:27:14)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "1351787a-959b-43b4-abe2-0523db0ac6cd",
              "parentUUID": "3170d020-2fd9-4b2a-96d2-9001993a3a10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if parameter is undefined",
              "fullTitle": "#upperFirst() should throw an error if parameter is undefined",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.throws(function () { upperFirst(undefined) }, Error);",
              "err": {
                "message": "AssertionError: expected [Function] to throw Error",
                "estack": "AssertionError: expected [Function] to throw Error\n    at Context.<anonymous> (file:///C:/Users/Omistaja/Software-testing/test/upperfirstTest.js:31:14)\n    at processImmediate (internal/timers.js:464:21)",
                "diff": null
              },
              "uuid": "69b6dc8a-d0b3-42e4-b29d-2879fc72aa45",
              "parentUUID": "3170d020-2fd9-4b2a-96d2-9001993a3a10",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f009a53a-2a62-47ad-9445-fc7ca4edeee7",
            "ee10753a-d8b4-4720-9cf8-76ec36a32e65",
            "562a1c64-8fc6-4914-a649-067b69e65919",
            "868f0abd-9c7c-4a79-8611-b1c565129232"
          ],
          "failures": [
            "1351787a-959b-43b4-abe2-0523db0ac6cd",
            "69b6dc8a-d0b3-42e4-b29d-2879fc72aa45"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}